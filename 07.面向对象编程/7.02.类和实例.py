# author:checky
# 类是抽象的模板，定义类通过class关键字

class Student(object):

    # 类的实例初始化操作
    # 注意：特殊方法“__init__”前后分别有两个下划线！！！
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # 打印分数
    def print_age(self):
        print("%s:%s" % (self.name, self.age))


stu = Student("张三", 24)
print(stu.name, stu.age)

# 和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数。
# 除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。

# 数据的封装
# 在上面的Student类中，每个实例都有自己的name和age数据，我们可以通过类自身定义的函数来访问这些数据，比如在类里面加上一个打印年龄的函数
# 要调用一个方法，只需要在实例变量上直接调用，除了self不用传递，其他参数正常传入
stu.print_age()

# 这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节

# 封装的另外一个好处就是可以给类添加新的方法

# 小结
# 类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；
# 方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；
# 通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。
# 和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：

stu1 = Student("李四", 27)
stu1.score = 99
print(stu1.name, stu1.age, stu1.score) # 李四 27 99

stu2 = Student("王五", 29)
stu2.city = "北京"
print(stu2.name, stu2.age, stu2.city) # 王五 29 北京
